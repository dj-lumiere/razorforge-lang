import system/console/write_line
redefinition A as B

# Entities, Records, menus, and Variants in RazorForge

# Entity Example - Reference type with inheritance  
entity Animal {
    public(family) var species: Text
    private var name: Text
    public(module) var class_name: Text
    
    public func __init__(name: Text, species: Text) -> Animal {
        me.name = name
        me.species = species
        return me
    }
    
    public func speak() -> Text {
        return f"{me.name} makes a sound"
    }
    
    public func get_name() -> Text {
        return me.name
    }
}

entity Dog from Animal {
    public var breed: Text
    
    public func __init__(name: Text, breed: Text) -> Dog {
        parent(name, "Canine")
        me.breed = breed
        return me
    }
    
    public func speak() -> Text {
        return f"{me.name} barks: Woof!"
    }
}

# Record Example - Value type for performance-critical data
record Point {
    public var x: f64
    public var y: f64
    
    public func distance_from_origin() -> f64 {
        return (me.x * me.x + me.y * me.y).sqrt()
    }
    
    public func translate(dx: f64, dy: f64) -> Point {
        return Point { x: me.x + dx, y: me.y + dy }
    }
}

record Vector3 {
    public var x: f64
    public var y: f64  
    public var z: f64
    
    public func magnitude() -> f64 {
        return (me.x * me.x + me.y * me.y + me.z * me.z).sqrt()
    }
    
    public func normalize() -> Vector3 {
        let mag = me.magnitude()
        return Vector3 {
            x: me.x / mag,
            y: me.y / mag, 
            z: me.z / mag
        }
    }
}

# Choice Example - C-style enumeration
choice Color {
    Red,
    Green,
    Blue,
    
    public func to_hex() -> Text {
        when me {
            Color.Red => "#FF0000",
            Color.Green => "#00FF00",
            Color.Blue => "#0000FF"
        }
    }
}

choice HttpStatus {
    Ok = 200,
    NotFound = 404,
    InternalServerError = 500
}

# Variant Example - Tagged union with data
chimera Result<T> {
    Success(T),
    Error(Error),
    
    public func unwrap() -> T {
        when me {
            is Error _ => crash!(f"Unwrap failed: {error}")
            _ => _,
        }
    }
    
    public func is_success() -> bool {
        when me {
            is Error _ => false
            _ => true,
        }
    }
    
    public func map<U>(f: func(T) -> U) -> Result<U> {
        when me {
            is Error e => e
            _ => f(_),
        }
    }
}

chimera Maybe<T> {
    Valid(T),
    Invalid,
    
    # This will be overridden as ?: operator.
    public func unwrap_or(default: T) -> T {
        when me {
            Invalid => default
            _ => _,
        }
    }
}

# Feature Example - Interface/trait for polymorphism
feature Drawable {
    func draw() -> Text
    func area() -> f64
}

# Memory-efficient record implementing feature
record Circle {
    public var radius: f64
    public var center: Point
    
    public func area() -> f64 {
        return 3.14159 * me.radius * me.radius
    }
}

impl Drawable for Circle {
    func draw() -> Text {
        return f"Circle at ({me.center.x}, {me.center.y}) with radius {me.radius}"
    }
    
    func area() -> f64 {
        return me.area()
    }
}

# Generic container with memory management
record Buffer<T> {
    private var data: T
    private var capacity: usize
    private var length: usize
    
    public func __init__(capacity: usize) -> Buffer<T> {
        me.data = HeapSlice<T>(capacity),
        me.capacity = capacity,
        me.length: 0
        return me
    }
    
    public func push!(item: T) {
        if me.length >= me.capacity {
            return Error("Buffer full")
        }
        me.data[me.length] = item
        me.length += 1
        return
    }
    
    # This overrides operator [].
    public func get!(index: usize) -> T {
        if index >= me.length {
            return IndexError("Index out of bounds!")
        }
        return me.data.refer!()
    }
}

# Usage example
func main() {
    # Entity usage
    let dog = Dog("Buddy", "Golden Retriever")
    write_line(dog.speak())
    
    # Record usage
    let point = Point(x: 3.0, y: 4.0)
    let distance = point.distance_from_origin()
    write_line(f"Distance: {distance}")
    
    # kind usage
    let color = Color.Red
    write_line(f"Color: {color.to_hex()}")
    
    # Variant usage
    let success: Result<i32> = 42
    let failure: Result<i32> = Error("Something went wrong")
    
    when success {
        is Error error => println(f"Error: {error}")
        _ => println(f"Got value: {_}"),
    }
    
    # Feature usage
    let circle = Circle(radius: 5.0, center: Point(x: 0.0, y: 0.0))
    write_line(circle.draw())
    
    # Generic buffer usage  
    var buffer = Buffer<i32>(10)
    buffer.push(1)
    buffer.push(2)
    buffer.push(3)
    
    var value = buffer.try_get(1)
    if value is i32 i {
        write_line(f"Buffer[1] = {i}")
    }
    
    for i in 1 to 10 step 2 {
        write_line(f"{i}")
    }
    
    var t8 = "aa"
    var t82 = t8"aa"
    var t16 = t16"aa"
    var t32 = t32"aa"
    var l8 = l8'\''
    var l16 = l16'a'
    var l32 = 'a'
}