# Test advanced expression types

func test_conditionals() -> i32 {
    let x = 5i32
    let y = 10i32
    
    # Conditional expressions (simple ternary-like only)
    let max = if x > y then x else y         # Should be: y (10)
    let min = if x < y then x else y         # Should be: x (5) 
    
    # For complex logic like sign recipe, use if/elif/else statements instead:
    # if x > 0 { sign = 1 } elif x < 0 { sign = -1 } else { sign = 0 }
    
    # Conditional in arithmetic context  
    let result = (if x > 0 then 2 else 1) * 3    # Should be: 2 * 3 = 6
    
    # Simple conditional expressions only - no nesting allowed
    let abs_val = if x < 0 then -x else x     # Simple absolute value
    
    return max + min  # Should be 15
}

func test_ranges() {
    # Basic range expressions
    let basic_range = 1 to 10                   # Range from 1 to 10 (step 1)
    let range_with_step = 0 to 100 step 5       # Range from 0 to 100 step 5
    let descending = 10 to 1 step -1             # Descending range
    
    # Range expressions in for loops (when implemented)
    # for i in 1 to 10 step 2 {
    #     print(i)  # Would print 1, 3, 5, 7, 9
    # }
    
    # Complex range expressions
    let start = 2i32
    let end = 20i32
    let step_val = 3i32
    let dynamic_range = start to end step step_val   # Variables in range
    
    # Nested expressions in ranges
    let expr_range = (1 + 2) to (10 * 2) step (1 + 1)  # Should be: 3 to 20 step 2
}

func test_mixed_expressions() -> bool {
    let a = 5i32
    let b = 10i32
    let c = 15i32
    
    # Mixing comparison chaining with conditionals
    let in_range = if a < b < c then true else false    # Should be true
    
    # Conditional with chained comparison
    let result = if 0 <= a < b <= 20 then a + b else 0  # Should be 15
    
    # Range with conditional bounds
    let cond_range = (if a > 0 then a else 0) to (if b > a then b else a)
    
    return in_range and result > 0
}

func test_precedence() -> i32 {
    let x = 5i32
    
    # Test precedence: conditional has lowest precedence
    let val = x + if x > 0 then 2 else 1          # Should be: x + (if x > 0 then 2 else 1) = 5 + 2 = 7
    
    # Test range precedence  
    let range_expr = 1 + 2 to 10 * 2             # Should be: (1 + 2) to (10 * 2) = 3 to 20
    
    # Chained comparison with arithmetic
    let chain_result = x + 1 < x * 2 <= 20       # Should be: (x + 1) < (x * 2) <= 20 = 6 < 10 <= 20 = true
    
    return val
}