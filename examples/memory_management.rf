# Memory management example in RazorForge
# Demonstrates HeapSlice, StackSlice, and danger zone functions

recipe memory_example() {
    # Safe memory allocation
    let heap_data = HeapSlice(4096B)
    let stack_buffer = StackSlice(1024B)

    # Regular variable operations
    var counter: u32 = 0
    preset max_iterations: u32 = 100

    # Control flow with memory operations
    while counter < max_iterations {
        counter = counter + 1
    }

    # Danger zone operations (require explicit danger blocks)
    danger {
        let ptr = addr_of!(counter)
        let value = read_as<u32>!(ptr)
        write_as<u32>!(ptr, value + 1)
    }

    # Memory cleanup
    danger {
        invalidate!(heap_data)
    }
}

# Record example with memory-safe design
struct DataProcessor {
    let buffer: HeapSlice
    var size: u64

    recipe new(capacity: u64) -> DataProcessor {
        return DataProcessor {
            buffer: HeapSlice(capacity),
            size: 0
        }
    }

    recipe process_data(data: StackSlice) {
        # Process data safely
        me.size = data.length
    }
}
