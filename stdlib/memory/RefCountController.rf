# RazorForge Reference Count Controller
# Core reference counting mechanism for shared memory management

struct RefCountController {
    private strong_count: s32
    private weak_count: s32
}

# Create new reference count controller with initial counts of 0
recipe RefCountController() -> RefCountController {
    return RefCountController {
        strong_count: 0,
        weak_count: 0
    }
}

# Simple non-atomic operations (single-threaded)
recipe RefCountController.increase_strong_count!(my: RefCountController) {
    my.strong_count += 1
}

recipe RefCountController.decrease_strong_count!(my: RefCountController) {
    my.strong_count -= 1
}

recipe RefCountController.increase_weak_count!(my: RefCountController) {
    my.weak_count += 1
}

recipe RefCountController.decrease_weak_count!(my: RefCountController) {
    my.weak_count -= 1
}

# Read-only access to counts
recipe RefCountController.strong_count(my: RefCountController) -> s32 {
    return my.strong_count
}

recipe RefCountController.weak_count(my: RefCountController) -> s32 {
    return my.weak_count
}

# Check if the controller should be deallocated
recipe RefCountController.should_deallocate_data(my: RefCountController) -> bool {
    return my.strong_count() == 0
}

recipe RefCountController.should_deallocate_controller(my: RefCountController) -> bool {
    return my.strong_count() == 0 and my.weak_count() == 0
}
