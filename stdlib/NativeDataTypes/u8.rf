# RazorForge u8 (unsigned 8-bit integer) native type implementation
# Maps directly to LLVM i8 type for unsigned operations

# Core u8 type definition - maps to LLVM i8
record u8 {
    public value: LlvmNativeI8
}

# Constants for u8 limits (LLVM constant values)
preset U8_MIN: u8 = 0_u8
preset U8_MAX: u8 = 255_u8
preset U8_ZERO: u8 = 0_u8
preset U8_ONE: u8 = 1_u8

# Basic arithmetic operations (LLVM intrinsics: add, sub, mul, udiv, urem)

# Addition with overflow checking
recipe u8.add(me: u8, other: u8) -> u8 {
    return llvm_intrinsic("llvm.uadd.with.overflow.i8", me, other)
}

# Subtraction with overflow checking
recipe u8.sub(me: u8, other: u8) -> u8 {
    return llvm_intrinsic("llvm.usub.with.overflow.i8", me, other)
}

# Multiplication with overflow checking
recipe u8.mul(me: u8, other: u8) -> u8 {
    return llvm_intrinsic("llvm.umul.with.overflow.i8", me, other)
}

# Division (unsigned) - maps to LLVM udiv
recipe u8.floordiv(me: u8, other: u8) -> u8 {
    when (other) {
        0 => throw panic("Division by zero"),
        _ => return llvm_intrinsic("udiv", me, other)
    }
}

# Remainder (unsigned) - maps to LLVM urem
recipe u8.rem(me: u8, other: u8) -> u8 {
    when (other) {
        0 => throw panic("Division by zero"),
        _ => return llvm_intrinsic("urem", me, other)
    }
}

# Bitwise operations (direct LLVM mapping)
recipe u8.and(me: u8, other: u8) -> u8 {
    return llvm_intrinsic("and", me, other)
}

recipe u8.or(me: u8, other: u8) -> u8 {
    return llvm_intrinsic("or", me, other)
}

recipe u8.xor(me: u8, other: u8) -> u8 {
    return llvm_intrinsic("xor", me, other)
}

recipe u8.not(me: u8) -> u8 {
    return llvm_intrinsic("xor", me, 255)
}

# Bit shifting operations
recipe u8.shl(me: u8, bits: u8) -> u8 {
    return llvm_intrinsic("shl", me, bits)
}

recipe u8.shr(me: u8, bits: u8) -> u8 {
    return llvm_intrinsic("lshr", me, bits)  # Logical right shift for unsigned
}

# Comparison operations (LLVM icmp)
recipe u8.eq(me: u8, other: u8) -> bool {
    return llvm_intrinsic("icmp eq", me, other)
}

recipe u8.ne(me: u8, other: u8) -> bool {
    return llvm_intrinsic("icmp ne", me, other)
}

recipe u8.lt(me: u8, other: u8) -> bool {
    return llvm_intrinsic("icmp ult", me, other)  # Unsigned less than
}

recipe u8.le(me: u8, other: u8) -> bool {
    return llvm_intrinsic("icmp ule", me, other)  # Unsigned less equal
}

recipe u8.gt(me: u8, other: u8) -> bool {
    return llvm_intrinsic("icmp ugt", me, other)  # Unsigned greater than
}

recipe u8.ge(me: u8, other: u8) -> bool {
    return llvm_intrinsic("icmp uge", me, other)  # Unsigned greater equal
}

# Math operations
recipe u8.min(me: u8, other: u8) -> u8 {
    return if me <= other then me else other
}

recipe u8.max(me: u8, other: u8) -> u8 {
    return if me >= other then me else other
}

# Bit manipulation utilities
recipe u8.count_leading_zeros(me: u8) -> u8 {
    return llvm_intrinsic("llvm.ctlz.i8", me, false)
}

recipe u8.count_trailing_zeros(me: u8) -> u8 {
    return llvm_intrinsic("llvm.cttz.i8", me, false)
}

recipe u8.count_ones(me: u8) -> u8 {
    return llvm_intrinsic("llvm.ctpop.i8", me)
}

# No byte swapping for 8-bit values (single byte)

# Type conversions to other native types (using constructor syntax)
recipe s8(from_u8: u8) -> s8 {
    return llvm_intrinsic("bitcast", from_u8)  # Direct bit reinterpretation
}

recipe u16(from_u8: u8) -> u16 {
    return llvm_intrinsic("zext", from_u8)     # Zero-extend to 16-bit
}

recipe u32(from_u8: u8) -> u32 {
    return llvm_intrinsic("zext", from_u8)     # Zero-extend to 32-bit
}

recipe u64(from_u8: u8) -> u64 {
    return llvm_intrinsic("zext", from_u8)     # Zero-extend to 64-bit
}

recipe s16(from_u8: u8) -> s16 {
    return llvm_intrinsic("zext", from_u8)     # Zero-extend to signed 16-bit
}

recipe s32(from_u8: u8) -> s32 {
    return llvm_intrinsic("zext", from_u8)     # Zero-extend to signed 32-bit
}

recipe s64(from_u8: u8) -> s64 {
    return llvm_intrinsic("zext", from_u8)     # Zero-extend to signed 64-bit
}

recipe f32(from_u8: u8) -> f32 {
    return llvm_intrinsic("uitofp", from_u8)   # Unsigned int to float
}

recipe f64(from_u8: u8) -> f64 {
    return llvm_intrinsic("uitofp", from_u8)   # Unsigned int to double
}

recipe bool(from_u8: u8) -> bool {
    return from_u8 != 0
}

# Parsing and formatting using constructor syntax
recipe u8(from_text: Text) -> u8 {
    # Parse Text to u8 using LLVM constant folding when possible
    return 0  # Placeholder
}

recipe Text(from_u8: u8) -> Text {
    # Convert u8 to Text representation
    return ""  # Placeholder
}

# Utility functions for byte operations
recipe u8.is_power_of_two(me: u8) -> bool {
    return me != 0 and (me & (me - 1)) == 0
}

recipe u8.next_power_of_two(me: u8) -> u8 {
    when (me) {
        0 => return 1,
        1 => return 1,
        _ => {
            var power: u8 = 1
            while power < me {
                power = power << 1
            }
            return power
        }
    }
}

# Saturating arithmetic (clamps to min/max instead of wrapping)
recipe u8.saturating_add(me: u8, other: u8) -> u8 {
    let result = me + other
    return if result < me then U8_MAX else result  # Overflow check
}

recipe u8.saturating_sub(me: u8, other: u8) -> u8 {
    return if me >= other then me - other else U8_ZERO
}

recipe u8.saturating_mul(me: u8, other: u8) -> u8 {
    let result = me * other
    return if other != 0 and result / other != me then U8_MAX else result
}

/*
LLVM IR Mapping:
- RazorForge u8 -> LLVM i8 -> C uint8_t
- Range: 0 to 255
- Unsigned operations use ult, uge, udiv, urem, lshr
- Efficient for byte arrays, pixel data, and small counters
- Zero-extension used for conversions to larger types
*/